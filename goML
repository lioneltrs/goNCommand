#!/bin/bash
#
# Lionel Cordesses, 2023.
# Script to build a MAME or FBAlpha romset (extension: .zip_original), and also FBNeo romset (extension: .zip) for Magician Lord, from the Amazon Prime Gaming game.

. ./romExtractionTools.sh

#=========================================================
MY_RAW_ROMS_DIR="$AMAZONGAMEFOLDER"/"Magician Lord/Data/rom"
#=========================================================
# MY_OUT_ROM_DIR_1 is the temporary output directory for ninjamas
MY_OUT_ROM_DIR_1="$ROMOUTPUTFOLDER"
#=========================================================
MY_ZIP_NAME=maglord
ROM_ID="005"
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Do not edit the path below this line!
#
MY_OUT_ROM_DIR="$MY_OUT_ROM_DIR_1"/"$MY_ZIP_NAME"

checkForZip
checkForCompiledSwizzle
cleanFilesForReRun $MY_OUT_ROM_DIR $MY_ZIP_NAME

# Check if s2.bin is available, and copy it as 005-s1.s1.
if [ ! -f "$MY_RAW_ROMS_DIR"/s2.bin ]; then
    echo "File s2.bin not found in $MY_RAW_ROMS_DIR!"
fi
cp "$MY_RAW_ROMS_DIR"/s2.bin "$MY_OUT_ROM_DIR"/"$ROM_ID"-s1.s1

# Sound data
dd if="$MY_RAW_ROMS_DIR"/v1.bin of="$MY_OUT_ROM_DIR"/"$ROM_ID"-v1.v1 skip=0 count=$((0x080000)) iflag=$IFLAG
dd if="$MY_RAW_ROMS_DIR"/v1.bin of="$MY_OUT_ROM_DIR"/"$ROM_ID"-v2.v2 skip=$((0x080000)) count=$((0x080000)) iflag=$IFLAG
dd if="$MY_RAW_ROMS_DIR"/v1.bin of="$MY_OUT_ROM_DIR"/"$ROM_ID"-v3.v3 skip=$(( $((0x080000))+$((0x080000)) )) count=$((0x080000)) iflag=$IFLAG

# Z80 code
# The following line works with FBAlpha, but FBNeo complains about the CRC32. I then tried the same trick that I used for Ninja Commando: half of the size and 0xff padding.
# It does not work. It is a quarter of the size (64 kB) and 64 kB of 0xff, then the same pattern again (it looks like the memory was read twice).
dd if="$MY_RAW_ROMS_DIR"/m1.bin of="$MY_OUT_ROM_DIR"/"$ROM_ID"-m1.m1b skip=$((0x0)) count=$((0x010000)) iflag=$IFLAG
# Create the 64KB of 0xff
dd if=/dev/zero ibs=1k count=64 | tr "\000" "\377" >tmp0xFF.bin
# Concat 005-m1.m1 and tmp0xFF.bin to create the final 005-m1.m1.
cat "$MY_OUT_ROM_DIR"/"$ROM_ID"-m1.m1b tmp0xFF.bin >"$MY_OUT_ROM_DIR"/"$ROM_ID"-m1.m1c
cat "$MY_OUT_ROM_DIR"/"$ROM_ID"-m1.m1c "$MY_OUT_ROM_DIR"/"$ROM_ID"-m1.m1c > "$MY_OUT_ROM_DIR"/"$ROM_ID"-m1.m1
rm "$MY_OUT_ROM_DIR"/"$ROM_ID"-m1.m1b
rm "$MY_OUT_ROM_DIR"/"$ROM_ID"-m1.m1c
rm tmp0xFF.bin

# 68K code
# Note: the 005-p1.p1 CRC32 is wrong. It is the same issue that I encountered with Ninja Commando and Ghost Pilots.
dd if="$MY_RAW_ROMS_DIR"/p1.bin of="$MY_OUT_ROM_DIR"/"$ROM_ID"-pg1.p1 skip=$((0x0)) count=$((0x080000)) iflag=$IFLAG

# Sprites
# It relies on the code written in Ack's post at https://www.arcade-projects.com/threads/samurai-shodown-v-perfect-on-real-hardware.13565/page-2
./ss_unswizzle "$MY_RAW_ROMS_DIR"/c1.bin odd even
split -b 524288 even even_d
split -b 524288 odd odd_d

mv even_daa "$MY_OUT_ROM_DIR"/"$ROM_ID"-c2.c2
mv even_dab "$MY_OUT_ROM_DIR"/"$ROM_ID"-c4.c4
mv even_dac "$MY_OUT_ROM_DIR"/"$ROM_ID"-c6.c6

mv odd_daa "$MY_OUT_ROM_DIR"/"$ROM_ID"-c1.c1
mv odd_dab "$MY_OUT_ROM_DIR"/"$ROM_ID"-c3.c3
mv odd_dac "$MY_OUT_ROM_DIR"/"$ROM_ID"-c5.c5

rm even odd

zip -j -r "$MY_ZIP_NAME".zip_original "$MY_OUT_ROM_DIR"

# Modification of the first 68K file to comply with FBNeo CRC32: replace byte at address 0x115 (value = 02) by (value = 00).
printf '\x00' | dd of="$MY_OUT_ROM_DIR"/"$ROM_ID"-pg1.p1 bs=1 seek=$((0x115)) count=1 conv=notrunc

zip -j -r "$MY_ZIP_NAME".zip "$MY_OUT_ROM_DIR"

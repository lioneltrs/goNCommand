#!/bin/bash
#
# Lionel Cordesses, 2023.
# Script to build a MAME or FBAlpha romset (extension: .zip_original), and also FBNeo romset (extension: .zip) for Robo Army, from the Amazon Prime Gaming game.

#=========================================================
MY_RAW_ROMS_DIR="/home/lionel2/provi/amazon/Robo Army/Data/rom"
#=========================================================
# MY_OUT_ROM_DIR_1 is the temporary output directory for ninjamas
MY_OUT_ROM_DIR_1="/home/lionel2/provi/lionel_ra"
#=========================================================
MY_ZIP_NAME=roboarmy
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Do not edit the path below this line!
#
MY_OUT_ROM_DIR="$MY_OUT_ROM_DIR_1"/"$MY_ZIP_NAME"

# Test if zip is installed.
if ! command -v zip &> /dev/null
then
    echo "zip could not be found. Maybe "sudo apt-get install zip"?"
    exit
fi

# Test is ss_unswizzle.c has been compiled.
if ! command -v ./ss_unswizzle &> /dev/null
then
    echo "ss_unswizzle could not be found. You may try: gcc -o ss_unswizzle ss_unswizzle.c"
    exit
fi

# Delete files and directories froms previous runs.
rm -r "$MY_OUT_ROM_DIR"
rm "$MY_ZIP_NAME".zip
#rm "$MY_ZIP_NAME".zip_original
mkdir -p "$MY_OUT_ROM_DIR"

# Check if s2.bin is available, and copy it as 032-s1.s1.
if [ ! -f "$MY_RAW_ROMS_DIR"/s2.bin ]; then
    echo "File s2.bin not found in $MY_RAW_ROMS_DIR!"
fi

cp "$MY_RAW_ROMS_DIR"/s2.bin "$MY_OUT_ROM_DIR"/032-s1.s1
chmod -x "$MY_OUT_ROM_DIR"/032-s1.s1

# Sound data
dd if="$MY_RAW_ROMS_DIR"/v1.bin of="$MY_OUT_ROM_DIR"/032-v1.v1 skip=0 count=$((0x100000)) iflag=skip_bytes,count_bytes
dd if="$MY_RAW_ROMS_DIR"/v1.bin of="$MY_OUT_ROM_DIR"/032-v2.v2 skip=$((0x100000)) count=$((0x100000)) iflag=skip_bytes,count_bytes

# Z80 code
dd if="$MY_RAW_ROMS_DIR"/m1.bin of="$MY_OUT_ROM_DIR"/032-m1.m1 skip=$((0x0)) count=$((0x020000)) iflag=skip_bytes,count_bytes
# Create the 64KB of 0xff
dd if=/dev/zero ibs=1k count=64 | tr "\000" "\377" >tmp0xFF.bin
# Concat 050-m1.m1 and tmp0xFF.bin to create the final 050-m1.m1.
#cat "$MY_OUT_ROM_DIR"/032-m1.m1b tmp0xFF.bin >"$MY_OUT_ROM_DIR"/032-m1.m1
#rm "$MY_OUT_ROM_DIR"/032-m1.m1b
rm tmp0xFF.bin

# 68K code
# Note: the 032-p1.p1 CRC32 is wrong. It is the same issue that I encountered with Ninja Commando and Ghost Pilots.
dd if="$MY_RAW_ROMS_DIR"/p1.bin of="$MY_OUT_ROM_DIR"/032-p1.p1 skip=$((0x0)) count=$((0x080000)) iflag=skip_bytes,count_bytes
#dd if="$MY_RAW_ROMS_DIR"/p1.bin of="$MY_OUT_ROM_DIR"/032-p2.sp2 skip=$((0x100000)) count=$((0x200000)) iflag=skip_bytes,count_bytes

# Sprites
# It relies on the code written in Ack's post at https://www.arcade-projects.com/threads/samurai-shodown-v-perfect-on-real-hardware.13565/page-2
./ss_unswizzle "$MY_RAW_ROMS_DIR"/c1.bin odd even
split -b $((0x100000)) even even_d
split -b $((0x100000)) odd odd_d

mv even_daa "$MY_OUT_ROM_DIR"/020-c2.c2
mv even_dab "$MY_OUT_ROM_DIR"/020-c4.c4

mv odd_daa "$MY_OUT_ROM_DIR"/020-c1.c1
mv odd_dab "$MY_OUT_ROM_DIR"/020-c3.c3

rm even odd


#zip -j -r "$MY_ZIP_NAME".zip_original "$MY_OUT_ROM_DIR"

# Modification of the first 68K file to comply with FBNeo CRC32: replace byte at address 0x115 (value = 02) by (value = 00).
printf '\x00' | dd of="$MY_OUT_ROM_DIR"/032-p1.p1 bs=1 seek=$((0x115)) count=1 conv=notrunc

zip -j -r "$MY_ZIP_NAME".zip "$MY_OUT_ROM_DIR"


